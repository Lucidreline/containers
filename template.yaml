AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-containers
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  pingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/ping.pingHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/items/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ItemsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref ItemsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /items
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  deleteAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/items/delete-all-items.deleteAllItemsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ItemsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref ItemsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /items/purge
            Method: DELETE

  getAllContainersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/containers/get-all-containers.getAllContainersHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /containers
            Method: GET

  deleteAllContainersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/containers/delete-all-containers.deleteAllContainersHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /containers/purge
            Method: DELETE
  
  deleteItemByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/items/delete-item-by-id.deleteItemByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ItemsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ITEMS_TABLE_NAME: !Ref ItemsTable
          CONTAINERS_TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /items/delete/{id}
            Method: DELETE

  deleteContainerByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/containers/delete-container-by-id.deleteContainerByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ItemsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ITEMS_TABLE_NAME: !Ref ItemsTable
          CONTAINERS_TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /containers/delete/{id}
            Method: DELETE

  

  getContainerByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/containers/get-container-by-id.getContainerByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /containers/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  putContainerFunction:
      Type: AWS::Serverless::Function
      Properties:
        Handler: src/handlers/containers/put-container.putContainerHandler
        Runtime: nodejs18.x
        Architectures:
        - x86_64
        MemorySize: 128
        Timeout: 100
        Description: A simple example includes a HTTP post method to add one item to
          a DynamoDB table.
        Policies:
          # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContainersTable
        - LambdaInvokePolicy:
            FunctionName:
                !Ref getAllContainersFunction
        Environment:
          Variables:
            # Make table name accessible as environment variable from function code during execution
            TABLE_NAME: !Ref ContainersTable
            MICROSERVICE_FUNCTION: !Ref getAllContainersFunction
        Events:
          Api:
            Type: Api
            Properties:
              Path: /containers
              Method: POST

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/items/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ItemsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ITEMS_TABLE_NAME: !Ref ItemsTable
          CONTAINERS_TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /items
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  moveItemByIds:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/items/move-item-by-ids.moveItemsByIdsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ContainersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref ItemsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ITEMS_TABLE_NAME: !Ref ItemsTable
          CONTAINERS_TABLE_NAME: !Ref ContainersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /items/move/
            Method: POST

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  ItemsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ContainersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
